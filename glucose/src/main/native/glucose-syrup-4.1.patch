diff -ruN glucose-syrup-4.1/core/Solver.cc glucose-syrup-4.1.new/core/Solver.cc
--- glucose-syrup-4.1/core/Solver.cc	2016-12-08 13:48:26.000000000 +0100
+++ glucose-syrup-4.1.new/core/Solver.cc	2021-06-08 22:04:32.000000000 +0200
@@ -122,9 +122,10 @@
 
 Solver::Solver() :
 
+termCallback (NULL), learnCallbackBuffer (NULL), learnCallback (NULL)
 // Parameters (user settable):
 //
-verbosity(0)
+, verbosity(0)
 , showModel(0)
 , K(opt_K)
 , R(opt_R)
@@ -314,6 +315,7 @@
 
 
 Solver::~Solver() {
+    free(this->learnCallbackBuffer);
 }
 
 
@@ -1354,7 +1356,8 @@
 void Solver::adaptSolver() {
     bool adjusted = false;
     bool reinit = false;
-    printf("c\nc Try to adapt solver strategies\nc \n");
+    if(verbosity >= 1)
+        printf("c\nc Try to adapt solver strategies\nc \n");
     /*  printf("c Adjusting solver for the SAT Race 2015 (alpha feature)\n");
     printf("c key successive Conflicts       : %" PRIu64"\n",stats[noDecisionConflict]);
     printf("c nb unary clauses learnt        : %" PRIu64"\n",stats[nbUn]);
@@ -1365,7 +1368,8 @@
         coLBDBound = 4;
         glureduce = true;
         adjusted = true;
-        printf("c Adjusting for low decision levels.\n");
+        if(verbosity >= 1)
+            printf("c Adjusting for low decision levels.\n");
         reinit = true;
         firstReduceDB = 2000;
         nbclausesbeforereduce = firstReduceDB;
@@ -1379,10 +1383,12 @@
         var_decay = 0.999;
         max_var_decay = 0.999;
         adjusted = true;
-        printf("c Adjusting for low successive conflicts.\n");
+        if(verbosity >= 1)
+            printf("c Adjusting for low successive conflicts.\n");
     }
     if(stats[noDecisionConflict] > 54400) {
-        printf("c Adjusting for high successive conflicts.\n");
+        if(verbosity >= 1)
+            printf("c Adjusting for high successive conflicts.\n");
         chanseokStrategy = true;
         glureduce = true;
         coLBDBound = 3;
@@ -1396,12 +1402,15 @@
         var_decay = 0.91;
         max_var_decay = 0.91;
         adjusted = true;
-        printf("c Adjusting for a very large number of true glue clauses found.\n");
+        if(verbosity >= 1)
+            printf("c Adjusting for a very large number of true glue clauses found.\n");
     }
     if(!adjusted) {
-        printf("c Nothing extreme in this problem, continue with glucose default strategies.\n");
+        if(verbosity >= 1)
+            printf("c Nothing extreme in this problem, continue with glucose default strategies.\n");
     }
-    printf("c\n");
+    if(verbosity >= 1)
+        printf("c\n");
     if(adjusted) { // Let's reinitialize the glucose restart strategy counters
         lbdQueue.fastclear();
         sumLBD = 0;
@@ -1422,7 +1431,8 @@
             }
         }
         learnts.shrink(i - j);
-        printf("c Activating Chanseok Strategy: moved %d clauses to the permanent set.\n", moved);
+        if(verbosity >= 1)
+            printf("c Activating Chanseok Strategy: moved %d clauses to the permanent set.\n", moved);
     }
 
     if(reinit) {
@@ -1441,7 +1451,8 @@
 	}
 	printf("c reinitialization of all variables activity/phase/learnt clauses.\n");
 */
-        printf("c Removing of non permanent clauses.\n");
+        if(verbosity >= 1)
+            printf("c Removing of non permanent clauses.\n");
     }
 
 }
@@ -1552,6 +1563,14 @@
                 }
             }
 
+            if (learnCallback != 0 && learnt_clause.size() <= learnCallbackLimit) {
+              for (int i = 0; i < learnt_clause.size(); i++) {
+                Lit lit = learnt_clause[i];
+                learnCallbackBuffer[i] = sign(lit) ? -(var(lit)+1) : (var(lit)+1);
+              }
+              learnCallbackBuffer[learnt_clause.size()] = 0;
+              learnCallback(learnCallbackState, learnCallbackBuffer);
+            }
 
             if(learnt_clause.size() == 1) {
                 uncheckedEnqueue(learnt_clause[0]);
@@ -1645,7 +1664,8 @@
                 decisions++;
                 next = pickBranchLit();
                 if(next == lit_Undef) {
-                    printf("c last restart ## conflicts  :  %d %d \n", conflictC, decisionLevel());
+                    if(verbosity >= 1)
+                        printf("c last restart ## conflicts  :  %d %d \n", conflictC, decisionLevel());
                     // Model found:
                     return l_True;
                 }
@@ -1912,7 +1932,7 @@
     for(int i = 0; i < clauses.size(); i++)
         toDimacs(f, ca[clauses[i]], map, max);
 
-    if(verbosity > 0)
+    if(verbosity >= 1)
         printf("Wrote %d clauses with %d variables.\n", cnt, max);
 }
 
@@ -1974,7 +1994,7 @@
     ClauseAllocator to(ca.size() - ca.wasted());
     relocAll(to);
     if(verbosity >= 2)
-        printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n",
+        printf("c [glucose-syrup4.1] |  Garbage collection:   %12d bytes => %12d bytes             |\n",
                ca.size() * ClauseAllocator::Unit_Size, to.size() * ClauseAllocator::Unit_Size);
     to.moveTo(ca);
 }
diff -ruN glucose-syrup-4.1/core/Solver.h glucose-syrup-4.1.new/core/Solver.h
--- glucose-syrup-4.1/core/Solver.h	2016-12-08 13:48:26.000000000 +0100
+++ glucose-syrup-4.1.new/core/Solver.h	2021-06-08 21:47:17.000000000 +0200
@@ -106,6 +106,25 @@
     Solver(const  Solver &s);
     
     virtual ~Solver();
+
+    void* termCallbackState;
+    int (*termCallback)(void* state);
+    void setTermCallback(void* state, int (*termCallback)(void*)) {
+       this->termCallbackState = state;
+       this->termCallback = termCallback;
+    }
+
+    void* learnCallbackState;
+    int* learnCallbackBuffer;
+    int learnCallbackLimit;
+    void (*learnCallback)(void * state, int * clause);
+    void setLearnCallback(void * state, int maxLength, void (*learn)(void * state, int * clause)) {
+      this->learnCallbackState = state;
+      this->learnCallbackLimit = maxLength;
+      this->learnCallbackBuffer = (int*) realloc (this->learnCallbackBuffer, (1+maxLength)*sizeof(int));
+      this->learnCallback = learn;
+    }
+
     
     /**
      * Clone function
@@ -545,7 +564,7 @@
 inline void     Solver::clearInterrupt(){ asynch_interrupt = false; }
 inline void     Solver::budgetOff(){ conflict_budget = propagation_budget = -1; }
 inline bool     Solver::withinBudget() const {
-    return !asynch_interrupt &&
+    return !asynch_interrupt && (termCallback == NULL || 0 == termCallback(termCallbackState)) &&
            (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
            (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
 
